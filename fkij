diff --git a/network.c b/network.c
index 8376433..cbdef7a 100644
--- a/network.c
+++ b/network.c
@@ -1,9 +1,7 @@
 #include "kernel.h"
-<<<<<<< HEAD
-//#include "machine.h"
 
 #define RING_SIZE 16
-#define DMA_SIZE NET_MAXPKT
+#define DMA_SIZE 4096
 volatile struct dev_net *net_dev;
 
 
@@ -21,16 +19,16 @@ void network_init(){
 
 			struct dma_ring_slot* ring = (struct dma_ring_slot*) malloc(sizeof(struct dma_ring_slot) * RING_SIZE);//malloc ring buffer
 
-			net_dev->rx_tail=0;
+			net_dev->rx_tail=1;
 			net_dev->rx_capacity=RING_SIZE;
 			net_dev->rx_head=0;
 
 			for (j=0; j< RING_SIZE; j++) { //malloc ring buffer slots
     			void* space = malloc(DMA_SIZE);
-    			ring[j].dma_base = (unsigned int )space;
-    			ring[j].dma_len = RING_SIZE;
+    			ring[j].dma_base = virtual_to_physical((unsigned int *)space);
+    			ring[j].dma_len = NET_MAXPKT;
 			}
-			net_dev->rx_base=(unsigned int )&ring[0];
+			net_dev->rx_base=virtual_to_physical(ring);
 
 
     	}
@@ -56,10 +54,11 @@ void network_set_interrupts(int opt){
 
 
 int handle_packet(unsigned int * base ){
-
+    //printf("head mod capacity %d tail mod capacity %d \n", net_dev->rx_head % net_dev->rx_capacity, net_dev->rx_tail % net_dev->rx_capacity);
 	if( (net_dev->rx_head % net_dev->rx_capacity) != (net_dev->rx_tail % net_dev->rx_capacity)){//not full
 		net_dev->rx_tail++;
 		printf("New packet handled\n");
+        
 		return 1;
 	}
 	else return 0;
@@ -68,9 +67,18 @@ int handle_packet(unsigned int * base ){
 
 // Continually polls for data on the ring buffer until the
 void network_poll(){
+    unsigned int head=net_dev->rx_head;
+    unsigned int tail=net_dev->rx_tail;
         int not_full=1;
-        while(net_dev->rx_head!=net_dev->rx_tail) {//while the buffer in non-empty
-                not_full=handle_packet( (unsigned int *) (net_dev->rx_head % net_dev->rx_capacity) );
+        printf("head %d tail %d capacity %d base %x\n",net_dev->rx_head,net_dev->rx_tail,net_dev->rx_capacity,net_dev->rx_base);
+        printf("polling..\n" );
+        unsigned int * base=(unsigned int *) net_dev->rx_base;
+        while(head!=tail) {//while the buffer in non-empty
+            printf("head %d tail %d capacity %d base %x\n",net_dev->rx_head,net_dev->rx_tail,net_dev->rx_capacity,net_dev->rx_base);
+
+            head=net_dev->rx_head;
+            tail=net_dev->rx_tail;
+                not_full=handle_packet( &base[tail%RING_SIZE]);
         }
 
 }
@@ -78,7 +86,7 @@ void network_poll(){
 // Called when a network interrupt occurs.
 void network_trap();
 
-=======
+
 
 inline void spin_lock(int* m){
     //TODO - asm
@@ -92,7 +100,7 @@ inline void unlock(int* m){
 void append_list(struct list_header *list, struct packet_info *packet){
     spin_lock(&(list->lock));
     
-    (list->tail)->next = packet;
+    //(list->tail)->next = packet;
     list->tail = packet;
     (list->length)++;
     
@@ -109,8 +117,8 @@ struct packet_info* poll(struct list_header *list){
     }
     
     struct packet_info* poll = list->head;
-    struct packet_info* next = poll->next;
-    list->head = next;
+    //struct packet_info* next = poll->next;
+    //list->head = next;
     (list->length)--;
     
     unlock(&(list->lock));
@@ -148,4 +156,3 @@ void remove_evil(struct evil_table_entry *table, unsigned int hash){
 void increment_evil(struct evil_table_entry *table){
         //TODO
 }
->>>>>>> 10ef9773c9a202cd26b82c44a341082a07fc8e76
